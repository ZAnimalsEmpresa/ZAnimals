//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Input/PlayerActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActions"",
    ""maps"": [
        {
            ""name"": ""UnitManagement"",
            ""id"": ""24c6710f-2a7c-47db-a5a1-9ba3082eaad7"",
            ""actions"": [
                {
                    ""name"": ""HandleCameraMove"",
                    ""type"": ""Value"",
                    ""id"": ""17779852-4e47-4555-80d7-726d8d97cad7"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""HandleCameraRotate"",
                    ""type"": ""Value"",
                    ""id"": ""416634d1-cc87-46a7-afce-6dee44339844"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""30e8a06e-7a71-47e6-8a93-a5bf9be367fa"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HandleCameraMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""3D Vector"",
                    ""id"": ""cfc99571-75ae-4af3-80e2-b0f5dec871d8"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HandleCameraMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""cbb817b8-9be7-48ad-9da9-f7237050bf2f"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HandleCameraMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""97a3754c-04bc-4372-a01f-2761793c4d7d"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HandleCameraMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6a2b91b8-1f2f-487f-9d89-21a77e25a97c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HandleCameraMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a8be1c1c-010e-4fb6-a641-d0f6b897144b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HandleCameraMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""forward"",
                    ""id"": ""a76456ce-7ec7-413b-9cf2-150c5b3ae58d"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HandleCameraMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""backward"",
                    ""id"": ""909e9710-661e-4dd9-8241-6105288651a8"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HandleCameraMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""1a68c5ea-7c01-483a-9131-fef1d101de58"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Default"",
                    ""action"": ""HandleCameraRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Default"",
            ""bindingGroup"": ""Default"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // UnitManagement
        m_UnitManagement = asset.FindActionMap("UnitManagement", throwIfNotFound: true);
        m_UnitManagement_HandleCameraMove = m_UnitManagement.FindAction("HandleCameraMove", throwIfNotFound: true);
        m_UnitManagement_HandleCameraRotate = m_UnitManagement.FindAction("HandleCameraRotate", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // UnitManagement
    private readonly InputActionMap m_UnitManagement;
    private List<IUnitManagementActions> m_UnitManagementActionsCallbackInterfaces = new List<IUnitManagementActions>();
    private readonly InputAction m_UnitManagement_HandleCameraMove;
    private readonly InputAction m_UnitManagement_HandleCameraRotate;
    public struct UnitManagementActions
    {
        private @PlayerActions m_Wrapper;
        public UnitManagementActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @HandleCameraMove => m_Wrapper.m_UnitManagement_HandleCameraMove;
        public InputAction @HandleCameraRotate => m_Wrapper.m_UnitManagement_HandleCameraRotate;
        public InputActionMap Get() { return m_Wrapper.m_UnitManagement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UnitManagementActions set) { return set.Get(); }
        public void AddCallbacks(IUnitManagementActions instance)
        {
            if (instance == null || m_Wrapper.m_UnitManagementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UnitManagementActionsCallbackInterfaces.Add(instance);
            @HandleCameraMove.started += instance.OnHandleCameraMove;
            @HandleCameraMove.performed += instance.OnHandleCameraMove;
            @HandleCameraMove.canceled += instance.OnHandleCameraMove;
            @HandleCameraRotate.started += instance.OnHandleCameraRotate;
            @HandleCameraRotate.performed += instance.OnHandleCameraRotate;
            @HandleCameraRotate.canceled += instance.OnHandleCameraRotate;
        }

        private void UnregisterCallbacks(IUnitManagementActions instance)
        {
            @HandleCameraMove.started -= instance.OnHandleCameraMove;
            @HandleCameraMove.performed -= instance.OnHandleCameraMove;
            @HandleCameraMove.canceled -= instance.OnHandleCameraMove;
            @HandleCameraRotate.started -= instance.OnHandleCameraRotate;
            @HandleCameraRotate.performed -= instance.OnHandleCameraRotate;
            @HandleCameraRotate.canceled -= instance.OnHandleCameraRotate;
        }

        public void RemoveCallbacks(IUnitManagementActions instance)
        {
            if (m_Wrapper.m_UnitManagementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUnitManagementActions instance)
        {
            foreach (var item in m_Wrapper.m_UnitManagementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UnitManagementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UnitManagementActions @UnitManagement => new UnitManagementActions(this);
    private int m_DefaultSchemeIndex = -1;
    public InputControlScheme DefaultScheme
    {
        get
        {
            if (m_DefaultSchemeIndex == -1) m_DefaultSchemeIndex = asset.FindControlSchemeIndex("Default");
            return asset.controlSchemes[m_DefaultSchemeIndex];
        }
    }
    public interface IUnitManagementActions
    {
        void OnHandleCameraMove(InputAction.CallbackContext context);
        void OnHandleCameraRotate(InputAction.CallbackContext context);
    }
}
